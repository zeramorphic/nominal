import Mathlib.CategoryTheory.ConcreteCategory.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.PullbackCone
import Nominal.Category.FinInj

/-!
# Colimits of shape `FinInj`

In this file, we construct the colimit in `Type` for a diagram of shape `FinInj`.
-/

open CategoryTheory Functor Limits

def finInjRel {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) (x y : (s : FinInj Œ±) √ó F.obj s) : Prop :=
  ‚àÉ (t : FinInj Œ±) (f : x.1 ‚ü∂ t) (g : y.1 ‚ü∂ t), F.map f x.2 = F.map g y.2

instance finInjRel_refl {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) :
    IsRefl _ (finInjRel F) := by
  constructor
  intro x
  exact ‚ü®x.1, ùüô x.1, ùüô x.1, rfl‚ü©

instance finInjRel_symm {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) :
    IsSymm _ (finInjRel F) := by
  constructor
  rintro x y ‚ü®t, f, g, h‚ü©
  exact ‚ü®t, g, f, h.symm‚ü©

instance : Fintype WalkingPair where
  elems := {.left, .right}
  complete x := by cases x <;> decide

instance finInjRel_trans {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    IsTrans _ (finInjRel F) := by
  have : DecidableEq Œ± := Classical.typeDecidableEq Œ±
  constructor
  intro x y z ‚ü®t‚ÇÅ, f‚ÇÅ, g‚ÇÅ, h‚ÇÅ‚ü© ‚ü®t‚ÇÇ, f‚ÇÇ, g‚ÇÇ, h‚ÇÇ‚ü©
  have := FinInj.pushoutCocone (span g‚ÇÅ f‚ÇÇ)
  refine ‚ü®(FinInj.pushoutCocone (span g‚ÇÅ f‚ÇÇ)).pt,
    f‚ÇÅ ‚â´ PushoutCocone.inl (FinInj.pushoutCocone (span g‚ÇÅ f‚ÇÇ)),
    g‚ÇÇ ‚â´ PushoutCocone.inr (FinInj.pushoutCocone (span g‚ÇÅ f‚ÇÇ)), ?_‚ü©
  rw [FunctorToTypes.map_comp_apply, FunctorToTypes.map_comp_apply, h‚ÇÅ, ‚Üê h‚ÇÇ,
    ‚Üê FunctorToTypes.map_comp_apply, ‚Üê FunctorToTypes.map_comp_apply,
    PushoutCocone.condition]

theorem finInjRel_equivalence {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    Equivalence (finInjRel F) :=
  ‚ü®(finInjRel_refl F).refl, (finInjRel_symm F).symm _ _, (finInjRel_trans F).trans _ _ _‚ü©

def finInjSetoid {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    Setoid ((s : FinInj Œ±) √ó F.obj s) where
  r := finInjRel F
  iseqv := finInjRel_equivalence F

def finInjColimitApex {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :=
  Quotient (finInjSetoid F)

def finInjCocone.{u, v} {Œ± : Type u} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type (max u v)) :
    Cocone F where
  pt := finInjColimitApex F
  Œπ := {
    app s x := Quotient.mk (finInjSetoid F) ‚ü®s, x‚ü©
    naturality s t f := by
      ext x
      simp only [const_obj_obj, types_comp_apply, const_obj_map, types_id_apply]
      apply Quotient.sound
      refine ‚ü®t, ùüô t, f, ?_‚ü©
      simp only [FunctorToTypes.map_id_apply]
  }

def finInjCocone_isColimit.{u, v} {Œ± : Type u} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type (max u v)) :
    IsColimit (finInjCocone F) where
  desc c := Quotient.lift (Œª x ‚Ü¶ c.Œπ.app x.1 x.2) <| by
    rintro ‚ü®s, x‚ü© ‚ü®t, y‚ü© ‚ü®u, f, g, h‚ü©
    dsimp only
    rw [‚Üê c.w f, ‚Üê c.w g, types_comp_apply, h]
    rfl
  fac c s := by
    ext x
    simp only [finInjCocone, const_obj_obj, types_comp_apply, Quotient.lift_mk]
  uniq c m h := by
    ext x
    induction x using Quotient.inductionOn
    case h x =>
    simp only [Quotient.lift_mk]
    rw [‚Üê h x.1]
    rfl

def finInjColimit.{u, v} {Œ± : Type u} [Infinite Œ±] :
    (FinInj Œ± ‚•§ Type (max u v)) ‚•§ Type (max u v) where
  obj := finInjColimitApex
  map a := Quotient.lift (Œª x ‚Ü¶ Quotient.mk _ ‚ü®x.1, a.app x.1 x.2‚ü©) <| by
    rintro ‚ü®s, x‚ü© ‚ü®t, y‚ü© ‚ü®u, f, g, h‚ü©
    apply Quotient.sound
    refine ‚ü®u, f, g, ?_‚ü©
    simp only
    refine (congr_arg (¬∑ x) (a.naturality f)).symm.trans ?_
    rw [types_comp_apply, h]
    exact (congr_arg (¬∑ y) (a.naturality g))
  map_id Œ≤ := by
    ext x
    induction x using Quotient.inductionOn
    case h x =>
    simp only [types_comp_apply, id_eq, eq_mpr_eq_cast, cast_eq, NatTrans.id_app, types_id_apply,
      Sigma.eta, Quotient.lift_mk]
  map_comp f g := by
    ext x
    induction x using Quotient.inductionOn
    case h x =>
    simp only [types_comp_apply, id_eq, eq_mpr_eq_cast, cast_eq, FunctorToTypes.comp,
      Quotient.lift_mk]
