import Mathlib.CategoryTheory.ConcreteCategory.Basic
import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
import Nominal.Category.FinInj

/-!
# Colimits of shape `FinInj`

In this file, we construct the colimit in `Type` for a diagram of shape `FinInj`.
-/

open CategoryTheory Functor Limits

def finInjRel {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) (x y : (s : FinInj Œ±) √ó F.obj s) : Prop :=
  ‚àÉ (t : FinInj Œ±) (f : x.1 ‚ü∂ t) (g : y.1 ‚ü∂ t), F.map f x.2 = F.map g y.2

instance finInjRel_refl {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) :
    IsRefl _ (finInjRel F) := by
  constructor
  intro x
  exact ‚ü®x.1, ùüô x.1, ùüô x.1, rfl‚ü©

instance finInjRel_symm {Œ± : Type*} (F : FinInj Œ± ‚•§ Type*) :
    IsSymm _ (finInjRel F) := by
  constructor
  rintro x y ‚ü®t, f, g, h‚ü©
  exact ‚ü®t, g, f, h.symm‚ü©

instance : Fintype WalkingPair where
  elems := {.left, .right}
  complete x := by cases x <;> decide

instance finInjRel_trans {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    IsTrans _ (finInjRel F) := by
  have : DecidableEq Œ± := Classical.typeDecidableEq Œ±
  constructor
  intro x y z ‚ü®t‚ÇÅ, f‚ÇÅ, g‚ÇÅ, h‚ÇÅ‚ü© ‚ü®t‚ÇÇ, f‚ÇÇ, g‚ÇÇ, h‚ÇÇ‚ü©
  have := FinInj.spanCocone (span g‚ÇÅ f‚ÇÇ)
  refine ‚ü®(FinInj.spanCocone (span g‚ÇÅ f‚ÇÇ)).pt,
    f‚ÇÅ ‚â´ PushoutCocone.inl (FinInj.spanCocone (span g‚ÇÅ f‚ÇÇ)),
    g‚ÇÇ ‚â´ PushoutCocone.inr (FinInj.spanCocone (span g‚ÇÅ f‚ÇÇ)), ?_‚ü©
  rw [FunctorToTypes.map_comp_apply, FunctorToTypes.map_comp_apply, h‚ÇÅ, ‚Üê h‚ÇÇ,
    ‚Üê FunctorToTypes.map_comp_apply, ‚Üê FunctorToTypes.map_comp_apply,
    PushoutCocone.condition]

theorem finInjRel_equivalence {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    Equivalence (finInjRel F) :=
  ‚ü®(finInjRel_refl F).refl, (finInjRel_symm F).symm _ _, (finInjRel_trans F).trans _ _ _‚ü©

def finInjSetoid {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :
    Setoid ((s : FinInj Œ±) √ó F.obj s) where
  r := finInjRel F
  iseqv := finInjRel_equivalence F

def finInjColimit {Œ± : Type*} [Infinite Œ±] (F : FinInj Œ± ‚•§ Type*) :=
  Quotient (finInjSetoid F)
